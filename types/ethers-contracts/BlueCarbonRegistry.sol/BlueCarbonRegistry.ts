/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface BlueCarbonRegistryInterface extends Interface {
    getFunction(nameOrSignature: "admin" | "nextOrgId" | "nextProjectId" | "organizations" | "projects" | "registerOrganization" | "registerProject" | "updateProjectStatus" | "verifyOrganization"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "OrganizationRegistered" | "OrganizationVerified" | "ProjectRegistered"): EventFragment;

    encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
encodeFunctionData(functionFragment: 'nextOrgId', values?: undefined): string;
encodeFunctionData(functionFragment: 'nextProjectId', values?: undefined): string;
encodeFunctionData(functionFragment: 'organizations', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'projects', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'registerOrganization', values: [string, BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'registerProject', values: [string, BigNumberish, string, BigNumberish, string]): string;
encodeFunctionData(functionFragment: 'updateProjectStatus', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'verifyOrganization', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nextOrgId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nextProjectId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'organizations', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'projects', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registerOrganization', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registerProject', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateProjectStatus', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifyOrganization', data: BytesLike): Result;
  }

  
    export namespace OrganizationRegisteredEvent {
      export type InputTuple = [orgId: BigNumberish, name: string, walletAddress: AddressLike];
      export type OutputTuple = [orgId: bigint, name: string, walletAddress: string];
      export interface OutputObject {orgId: bigint, name: string, walletAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OrganizationVerifiedEvent {
      export type InputTuple = [orgId: BigNumberish];
      export type OutputTuple = [orgId: bigint];
      export interface OutputObject {orgId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ProjectRegisteredEvent {
      export type InputTuple = [projectId: BigNumberish, name: string, orgId: BigNumberish];
      export type OutputTuple = [projectId: bigint, name: string, orgId: bigint];
      export interface OutputObject {projectId: bigint, name: string, orgId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface BlueCarbonRegistry extends BaseContract {
    
    connect(runner?: ContractRunner | null): BlueCarbonRegistry;
    waitForDeployment(): Promise<this>;

    interface: BlueCarbonRegistryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    admin: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    nextOrgId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    nextProjectId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    organizations: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, string, boolean] & {id: bigint, name: string, orgType: bigint, walletAddress: string, isVerified: boolean }],
      'view'
    >
    

    
    projects: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, string, bigint, string, bigint] & {id: bigint, name: string, orgId: bigint, location: string, projectArea: bigint, ipfsHash: string, status: bigint }],
      'view'
    >
    

    
    registerOrganization: TypedContractMethod<
      [_name: string, _orgType: BigNumberish, _walletAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    registerProject: TypedContractMethod<
      [_name: string, _orgId: BigNumberish, _location: string, _projectArea: BigNumberish, _ipfsHash: string, ],
      [void],
      'nonpayable'
    >
    

    
    updateProjectStatus: TypedContractMethod<
      [_projectId: BigNumberish, _status: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    verifyOrganization: TypedContractMethod<
      [_orgId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'admin'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'nextOrgId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'nextProjectId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'organizations'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, string, boolean] & {id: bigint, name: string, orgType: bigint, walletAddress: string, isVerified: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'projects'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, string, bigint, string, bigint] & {id: bigint, name: string, orgId: bigint, location: string, projectArea: bigint, ipfsHash: string, status: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'registerOrganization'): TypedContractMethod<
      [_name: string, _orgType: BigNumberish, _walletAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'registerProject'): TypedContractMethod<
      [_name: string, _orgId: BigNumberish, _location: string, _projectArea: BigNumberish, _ipfsHash: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateProjectStatus'): TypedContractMethod<
      [_projectId: BigNumberish, _status: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'verifyOrganization'): TypedContractMethod<
      [_orgId: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'OrganizationRegistered'): TypedContractEvent<OrganizationRegisteredEvent.InputTuple, OrganizationRegisteredEvent.OutputTuple, OrganizationRegisteredEvent.OutputObject>;
getEvent(key: 'OrganizationVerified'): TypedContractEvent<OrganizationVerifiedEvent.InputTuple, OrganizationVerifiedEvent.OutputTuple, OrganizationVerifiedEvent.OutputObject>;
getEvent(key: 'ProjectRegistered'): TypedContractEvent<ProjectRegisteredEvent.InputTuple, ProjectRegisteredEvent.OutputTuple, ProjectRegisteredEvent.OutputObject>;

    filters: {
      
      'OrganizationRegistered(uint256,string,address)': TypedContractEvent<OrganizationRegisteredEvent.InputTuple, OrganizationRegisteredEvent.OutputTuple, OrganizationRegisteredEvent.OutputObject>;
      OrganizationRegistered: TypedContractEvent<OrganizationRegisteredEvent.InputTuple, OrganizationRegisteredEvent.OutputTuple, OrganizationRegisteredEvent.OutputObject>;
    

      'OrganizationVerified(uint256)': TypedContractEvent<OrganizationVerifiedEvent.InputTuple, OrganizationVerifiedEvent.OutputTuple, OrganizationVerifiedEvent.OutputObject>;
      OrganizationVerified: TypedContractEvent<OrganizationVerifiedEvent.InputTuple, OrganizationVerifiedEvent.OutputTuple, OrganizationVerifiedEvent.OutputObject>;
    

      'ProjectRegistered(uint256,string,uint256)': TypedContractEvent<ProjectRegisteredEvent.InputTuple, ProjectRegisteredEvent.OutputTuple, ProjectRegisteredEvent.OutputObject>;
      ProjectRegistered: TypedContractEvent<ProjectRegisteredEvent.InputTuple, ProjectRegisteredEvent.OutputTuple, ProjectRegisteredEvent.OutputObject>;
    
    };
  }